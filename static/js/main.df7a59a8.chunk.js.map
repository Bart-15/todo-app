{"version":3,"sources":["components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","todos","setTodos","todo","setTodo","todoEditing","setTodoEditing","editingText","setEditingText","useEffect","json","localStorage","getItem","loadTodos","JSON","parse","stringify","setItem","Toast","Swal","mixin","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","stopTimer","resumeTimer","className","onSubmit","e","preventDefault","fire","title","text","icon","newTodo","id","Date","getTime","completed","concat","type","onChange","target","value","placeholder","map","onDoubleClick","updatedTodo","toggleComplete","onClick","filter","deleteTodo","updatedTodos","submitEdit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df7a59a8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nconst Todo = () => {\r\n  const [todos, setTodos] = useState([])\r\n  const [todo, setTodo] = useState('')\r\n  const [todoEditing, setTodoEditing] = useState(null)\r\n  const [editingText, setEditingText] = useState('')\r\n\r\n  useEffect(() => {\r\n    const json = localStorage.getItem('todos')\r\n    const loadTodos = JSON.parse(json)\r\n    if (loadTodos) {\r\n      setTodos(loadTodos)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const json = JSON.stringify(todos)\r\n    localStorage.setItem('todos', json)\r\n  }, [todos])\r\n\r\n  const addTodo = (e) => {\r\n    e.preventDefault()\r\n    if (todo === '') {\r\n      Swal.fire({\r\n        title: 'Error!',\r\n        text: 'Please insert value',\r\n        icon: 'error',\r\n      })\r\n    } else {\r\n      const newTodo = {\r\n        id: new Date().getTime(),\r\n        text: todo,\r\n        completed: false,\r\n      }\r\n      \r\n      Toast.fire({\r\n        icon: 'success',\r\n        title: 'Todo added successfully',\r\n      })\r\n      setTodos([...todos].concat(newTodo))\r\n      setTodo('')\r\n    }\r\n  }\r\n\r\n  const deleteTodo = (id) => {\r\n    let newTodo = [...todos].filter((todo) => todo.id !== id)\r\n     Toast.fire({\r\n       icon: 'success',\r\n       title: 'Todo deleted successfully',\r\n     })\r\n    setTodos(newTodo)\r\n  }\r\n\r\n  const toggleComplete = (id) => {\r\n    let updatedTodo = [...todos].map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.completed = !todo.completed\r\n      }\r\n      return todo\r\n    })\r\n    setTodos(updatedTodo)\r\n  }\r\n\r\n  const submitEdit = (id) => {\r\n    const updatedTodos = [...todos].map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.text = editingText\r\n         Toast.fire({\r\n           icon: 'success',\r\n           title: 'Todo updated successfully successfully',\r\n         })\r\n      }\r\n      return todo\r\n    })\r\n    setTodos(updatedTodos)\r\n    setTodoEditing(null)\r\n  }\r\n\r\n  //Sweet alert Toast\r\n  const Toast = Swal.mixin({\r\n    toast: true,\r\n    position: 'top-end',\r\n    showConfirmButton: false,\r\n    timer: 3000,\r\n    timerProgressBar: true,\r\n    didOpen: (toast) => {\r\n      toast.addEventListener('mouseenter', Swal.stopTimer)\r\n      toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n    },\r\n  })\r\n  return (\r\n    <>\r\n      <div className='container'>\r\n        <div className='row justify-content-center'>\r\n          <div className='col-sm-4 col-md-6 col-lg-8'>\r\n            <div className='title pt-5'>\r\n              <h1>Hey buddy!! Let's track your activity.</h1>\r\n            </div>\r\n            <div className='instruction'>\r\n              <ul className='list-unstyled'>\r\n                <li>If the text has a line through, it means complete.</li>\r\n                <li>Double click the todo to marked as completed.</li>\r\n              </ul>\r\n            </div>\r\n            <form onSubmit={addTodo}>\r\n              <div className='form-group'>\r\n                <input\r\n                  type='text'\r\n                  className='form-control'\r\n                  onChange={(e) => setTodo(e.target.value)}\r\n                  value={todo}\r\n                  placeholder='Enter Value'\r\n                />\r\n              </div>\r\n              <div className='form-group'>\r\n                <button type='submit' className='btn text-white submit-btn'>\r\n                  Add Todo\r\n                </button>\r\n              </div>\r\n            </form>\r\n            {todos.map((todo) => {\r\n              return (\r\n                <div className='todo' key={todo.id}>\r\n                  <p\r\n                    onDoubleClick={() => toggleComplete(todo.id)}\r\n                    className={todo.completed ? 'todo-completed' : 'todo-text'}\r\n                  >\r\n                    {todo.id === todoEditing ? (\r\n                      <input\r\n                        className='my-form'\r\n                        type='text'\r\n                        onChange={(e) => setEditingText(e.target.value)}\r\n                      />\r\n                    ) : (\r\n                      todo.text\r\n                    )}\r\n                  </p>\r\n\r\n                  <div className='actions'>\r\n                    <button\r\n                      onClick={() => deleteTodo(todo.id)}\r\n                      className='delButton'\r\n                      type='button'\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                    {todo.id === todoEditing ? (\r\n                      <button\r\n                        onClick={() => submitEdit(todo.id)}\r\n                        type='submit'\r\n                        className='editButton'\r\n                      >\r\n                        Submit Edit\r\n                      </button>\r\n                    ) : (\r\n                      <button\r\n                        onClick={() => setTodoEditing(todo.id)}\r\n                        type='submit'\r\n                        className='editButton'\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","\nimport './App.css';\nimport Todo from './components/Todo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <section className=\"todo-app\">\n       <Todo />\n     </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}